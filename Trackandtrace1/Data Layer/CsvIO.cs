using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Trackandtrace1.Data_Layer
{
    class CsvIO
    {

        public static void importCSV(string filepath, string header, string csv) //Function that it used multiple times for making CSV files
        //string csv argument should be a a string containing a line, already formatted, to be imported in the CSV file
        {

            using (System.IO.StreamWriter file = new System.IO.StreamWriter(filepath, true)) //make a file if it does not exist
            {

            }

            string[] lines = System.IO.File.ReadAllLines(filepath); //save all the lines in string array
            int len = lines.Length;

            if (len == 0) // if file is empty, add header
            {
                using (System.IO.StreamWriter file = new System.IO.StreamWriter(filepath, true))
                {
                    file.WriteLine(header);
                    len++;
                }
            }
            using (System.IO.StreamWriter file = new System.IO.StreamWriter(filepath, true))
            {

                file.WriteLine(len.ToString() + "," + csv); //add simple autogenerated id (line number) and formatted line to csv file
            }
        }

        public static string[] findCsvLine(string search_term, int search_field, string file_path)
        {
            string[] notFoundErr = { "Error 1! Record Not Found. Please try again." };
            using (System.IO.StreamWriter file = new System.IO.StreamWriter(file_path, true))
            {

            }
            string[] lines = System.IO.File.ReadAllLines(file_path);
            for (int i = 0; i < lines.Length; i++)
            {
                string[] AllFields = lines[i].Split(','); //split all lines to fields by comma
                if (recordMatches(search_term, AllFields, search_field)) //using a pre-wirtten function which returns bool
                {
                    return AllFields;
                }
            }
            return notFoundErr; //return an error if not found
        }

        public static bool recordMatches(string search_term, string[] record, int search_field)
        {
            if (record[search_field].Equals(search_term))
            {
                return true;
            }
            return false;
        }
    }
}
